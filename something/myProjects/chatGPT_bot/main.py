import asyncio
import logging
import json
import tiktoken
import requests
import os

from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import filters
from aiogram.utils import executor
from aiogram.utils.exceptions import TelegramAPIError
from aiogram.types import ChatActions
from db import Database
from chatgpt import gpt_prompt, gen_image, audio_to_text


logging.basicConfig(level=logging.INFO)
bot = Bot(token='BOT_TOKEN')
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
db = Database('database/database.db')

async def anti_flood(*args, **kwargs):
    message = args[0]
    rate = kwargs['rate']
    mes = await message.reply("‚ö†Ô∏è–ü–æ–¥–æ–∂–¥–∏—Ç–µ!")
    for i in range(rate):
        await mes.edit_text(f'‚ö†Ô∏è–°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ {rate - i} —Å–µ–∫.')
        await asyncio.sleep(1)
    await mes.delete()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –∑–∞–ø—Ä–æ—Å–µ
def count_tokens(messages, model="gpt-3.5-turbo-0301"):
    encoding = tiktoken.encoding_for_model(model)
    num_tokens = 0
    for message in messages:
        num_tokens += 4
        for key, value in message.items():
            num_tokens += len(encoding.encode(value))
            if key == "name":
                num_tokens += -1
    num_tokens += 2
    return num_tokens


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands='start')
async def start(message: types.Message):
    text = f"üëã *–ü—Ä–∏–≤–µ—Ç, —è ChatGPT - —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º –≤ –ª—é–±—ã—Ö" \
           f" –≤–æ–ø—Ä–æ—Å–∞—Ö –∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞—Ö! –Ø –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –º–æ—â–Ω–æ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ GPT-3.5, –∏ —è –≥–æ—Ç–æ–≤ " \
           f"–æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã, " \
           f"–ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ –∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å.*\n\n" \
           f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" \
           f"üëâ `!img` _[–∑–∞–ø—Ä–æ—Å]_ ‚Äì –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É\n" \
           f"üëâ `!bugfix` _[–∫–æ–¥]_ ‚Äì –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫–∏ –≤ –∫–æ–¥–µ\n" \
           f"üëâ `!ru` _[—Ç–µ–∫—Å—Ç]_ ‚Äì –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫\n" \
           f"üëâ `!en` _[—Ç–µ–∫—Å—Ç]_ ‚Äì –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫\n\n" \
           f"üî• *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ, ChatGPT –º–æ–∂–µ—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–º –¥–æ 2 –º–±. " \
           f"–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –±–æ—Ç—É, –∏ –æ–Ω —Å –ª–µ–≥–∫–æ—Å—Ç—å—é —Å–ø—Ä–∞–≤–∏—Ç—Å—è —Å –∑–∞–¥–∞—á–µ–π.*"
    if not db.user_exists(message.from_user.id):
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î,–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –ë–î
        db.add_user(message.from_user.id)
        await message.answer(text, parse_mode=types.ParseMode.MARKDOWN)
    else:
        await message.answer(text, parse_mode=types.ParseMode.MARKDOWN)


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã !img [–∑–∞–ø—Ä–æ—Å]
@dp.message_handler(commands='img', commands_prefix='!')
@dp.throttled(anti_flood, rate=10)
async def generate_image(message: types.Message):
    # –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –æ—à–∏–±–∫–∏
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        prompt = message.text.split(' ', maxsplit=1)
        await message.answer(f'‚è± –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...')
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é gen_image –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –∏ –ø–µ—Ä–µ–¥–∞–µ–º –≤ –Ω–µ–µ –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        loop = asyncio.get_event_loop()
        res = await loop.run_in_executor(None, gen_image, prompt[1])
        # –í —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞ gen_image –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False
        if res:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º get-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            image = requests.get(res)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é
            await bot.send_photo(message.from_user.id,
                                 photo=image.content,
                                 caption=f'‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É "{prompt[1]}"')
        else:
            await message.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å')
    except:
        await message.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å')


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–∞–Ω–¥ !ru, !en, !bugfix
@dp.message_handler(commands=['ru', 'en', 'bugfix'], commands_prefix='!')
@dp.throttled(anti_flood, rate=10)
async def short_com(message: types.Message):
    # –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –æ—à–∏–±–∫–∏
    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∫–æ–º–º–∞–Ω–¥—É –∏ –∑–∞–ø—Ä–æ—Å
        command, prompt = message.text.split(' ', maxsplit=1)

        short_command = {
            '!en': '–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π:',
            '!ru': '–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π:',
            '!bugfix': '–ò—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏ –≤ –∫–æ–¥–µ:\n'
        }
        # –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —Å –∑–∞–ø—Ä–æ—Å–æ–º
        user_prompt = [{"role": "user", "content": f"{short_command[command]} {prompt}"}]
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–±—ã—Ç–∏–µ "–Ω–∞–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è" –≤ —á–∞—Ç–µ
        await bot.send_chat_action(message.from_user.id, ChatActions.TYPING)
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é gpt_prompt –≤ –ø–æ—Ç–æ–∫–µ –∏ –ø–µ—Ä–µ–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Å –∑–∞–ø—Ä–æ—Å–æ–º
        loop = asyncio.get_event_loop()
        response = await loop.run_in_executor(None, gpt_prompt, user_prompt)
        # –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –æ—à–∏–±–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π —Ç–µ–∫—Å—Ç–∞
        try:
            await message.reply(response.choices[0].message.content, parse_mode=types.ParseMode.MARKDOWN)
        except TelegramAPIError:
            # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–∞–∑–º–µ—Ç–∫–∏, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–º–µ—Ç–∫–∏
            await message.reply(response.choices[0].message.content)

    except:
        await message.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å')


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–∞–Ω–¥—ã /clear
@dp.message_handler(commands='clear')
@dp.throttled(anti_flood, rate=5)
async def clear(message: types.Message):
    mes = await message.answer('üßπ–û—á–∏—â–∞—é —á–∞—Ç...')
    # –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    db.update_user_chat('[]', message.from_user.id)
    await asyncio.sleep(1)
    await mes.edit_text('‚úÖ –ß–∞—Ç –æ—á–∏—â–µ–Ω!')


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(filters.Text)
@dp.throttled(anti_flood, rate=10)
async def echo(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.reply_to_message is not None:
        # –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        replied_message = message.reply_to_message
        text = str(replied_message.text).replace('"', "``").replace("'", "`")
        # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Å –∑–∞–ø—Ä–æ—Å–æ–º
        prompt = [{"role": "system", "content": f"{text}"}, {"role": "user", "content": f"{message.text}"}]
    else:
        question = str(message.text).replace('"', "``").replace("'", "`")
        user_chat = json.loads(db.get_user_chat(message.from_user.id))
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ (—É API –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ 4097 —Ç–æ–∫–µ–Ω–æ–≤)
        if count_tokens(user_chat) >= 3800:
            # –£–¥–∞–ª—è–µ–º —Ä–∞–Ω–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–µ —Å—Ç–∞–Ω–µ—Ç –º–µ–Ω—å—à–µ 3000
            while count_tokens(user_chat) > 3000:
                user_chat.pop(0)
        else:
            pass
        user_chat.append({"role": "user", "content": f"{question}"})
        prompt = user_chat

    await bot.send_chat_action(message.from_user.id, ChatActions.TYPING)
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é gpt_prompt –≤ –ø–æ—Ç–æ–∫–µ –∏ –ø–µ—Ä–µ–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
    loop = asyncio.get_event_loop()
    response = await loop.run_in_executor(None, gpt_prompt, prompt)

    if message.reply_to_message is not None:
        pass
    else:
        answer = str(response.choices[0].message.content).replace("'", "`").replace('"', '``')
        prompt.append({"role": "system", "content": f"{answer}"})
        db.update_user_chat(str(prompt), message.from_user.id)

    # –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –æ—à–∏–±–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π —Ç–µ–∫—Å—Ç–∞
    try:
        await message.reply(response.choices[0].message.content, parse_mode=types.ParseMode.MARKDOWN)
    except TelegramAPIError:
        # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–∞–∑–º–µ—Ç–∫–∏, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–º–µ—Ç–∫–∏
        await message.reply(response.choices[0].message.content)


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
@dp.message_handler(content_types=[types.ContentType.VOICE, types.ContentType.AUDIO])
@dp.throttled(anti_flood, rate=10)
async def handle_audio_voice(message: types.Message):
    audio_file = None
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if message.voice:
        if int(message.voice.file_size) < 2000000:
            if os.path.isfile(f'user_audio/{message.from_user.id}.ogg'):
                await message.reply('‚è± –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –¥—Ä—É–≥–æ–≥–æ —Ñ–∞–π–ª–∞...')
            else:
                await message.voice.download(destination_file=f'user_audio/{message.from_user.id}.ogg')
                audio_file = f'user_audio/{message.from_user.id}.ogg'
        else:
            await message.answer('‚ùå –ë–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞')
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
    elif message.audio:
        formats = ['audio/m4a', 'audio/mp3', 'audio/webm', 'audio/mp4', 'audio/mpga', 'audio/wav', 'audio/mpeg']
        if message.audio.mime_type in formats:
            if int(message.audio.file_size) < 2000000:
                if os.path.isfile(f'user_audio/{message.from_user.id}.mp3'):
                    await message.reply('‚è± –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –¥—Ä—É–≥–æ–≥–æ —Ñ–∞–π–ª–∞...')
                else:
                    await message.audio.download(destination_file=f'user_audio/{message.from_user.id}.mp3')
                    audio_file = f'user_audio/{message.from_user.id}.mp3'
            else:
                await message.answer('‚ùå –ë–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞')
        else:
            await message.answer('‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞')
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é audio_to_text –≤ –ø–æ—Ç–æ–∫–µ
    loop = asyncio.get_event_loop()
    response = await loop.run_in_executor(None, audio_to_text, audio_file)
    if not response:
        # –ï—Å–ª–∏ —Å–ª–æ–≤–∞ –Ω–µ –±—ã–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã
        await message.reply(f'_–ó–≤—É–∫–∏ —Ç–∏—à–∏–Ω—ã..._', parse_mode=types.ParseMode.MARKDOWN)
    else:
        await message.reply(f'_{response}_', parse_mode=types.ParseMode.MARKDOWN)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)